package beans;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import org.primefaces.context.RequestContext;
import org.primefaces.event.ItemSelectEvent;
import org.primefaces.model.chart.CartesianChartModel;
import org.primefaces.model.chart.ChartSeries;
import pojos.BdCModes;
import pojos.BurnDownElement;

/**
 *
 * @author Philip Poelz
 */
public class BurnDownChartBean{
//Structure of the Burndown Chart
    private CartesianChartModel burnDownChartModel;
    private ChartSeries desiredStateSeries;
    private ChartSeries actualStateSeries;
    
//Enum for Burndown Chart functions
    private BdCModes modes;
    
//Add function
    private String newKey;
    //added after clicking on a series
    private String newValue;
    
    //added after submitting the dialog
    private String actualValue;
    private String desiredValue;
    
//Edit function
    private BurnDownElement beforeEdit;
    private BurnDownElement afterEdit;
    private int oldValue;
    private int alteredValue;
    
//Messages
    private FacesMessage error;
    
    private boolean popupPanelADD=false;
    private boolean popupDialogEdit=false;
    private boolean popupDialogChangeOrder=false;
    
//    private boolean bothSeries=false;
    
//Needed for chartListener
    private int seriesindex;
    private int itemindex;
    
    public BurnDownChartBean() {    
        burnDownChartModel = new CartesianChartModel();
        desiredStateSeries = new ChartSeries("Desired State");
        actualStateSeries = new ChartSeries("Actual State");
        
        desiredStateSeries.set("ProjectStart", 0);
        actualStateSeries.set("ProjectStart", 0);
        
        desiredStateSeries.set("Next Hop", 10);
        actualStateSeries.set("Next Hop", 15);        
        
        desiredStateSeries.set("a", 20);
        actualStateSeries.set("a", 25);
        
        desiredStateSeries.set("b", 30);       
        actualStateSeries.set("b", 35);
        
        desiredStateSeries.set("c", 40);
        actualStateSeries.set("c", 45);
        
        desiredStateSeries.set("d", 50);
        actualStateSeries.set("d", 55);
        
        burnDownChartModel.addSeries(desiredStateSeries);
        burnDownChartModel.addSeries(actualStateSeries);
        
        error=null;
        beforeEdit=null;
        afterEdit=null;
    }

    public BurnDownChartBean(CartesianChartModel burnDownChartModel, ChartSeries desiredStateSeries, ChartSeries actualStateSeries) {
        this.burnDownChartModel = burnDownChartModel;
        this.desiredStateSeries = desiredStateSeries;
        this.actualStateSeries = actualStateSeries;
    }

/*-------------------------Getter and Setter----------------------------------*/
    public CartesianChartModel getBurnDownChartModel() {
        return burnDownChartModel;
    }

    public void setBurnDownChartModel(CartesianChartModel burnDownChartModel) {
        this.burnDownChartModel = burnDownChartModel;
    }

    public String getNewKey() {
        return newKey;
    }

    public void setNewKey(String newKey) {
        this.newKey = newKey;
    }

    public String getNewValue() {
        return newValue;
    }

    public void setNewValue(String newValue) {
        this.newValue = newValue;
    }

    public boolean isPopupPanelADD() {
        return popupPanelADD;
    }

    public void setPopupPanelADD(boolean popupPanel) {
        this.popupPanelADD = popupPanel;
    }

//    public boolean isBothSeries() {
//        return bothSeries;
//    }
//
//    public void setBothSeries(boolean bothSeries) {
//        this.bothSeries = bothSeries;
//    }        

    public String getActualValue() {
        return actualValue;
    }

    public void setActualValue(String series1Value) {
        this.actualValue = series1Value;
    }
    
    public String getDesiredValue() {
        return desiredValue;
    }

    public void setDesiredValue(String series2Value) {
        this.desiredValue = series2Value;
    }

    public BurnDownElement getBeforeEdit() {
        return beforeEdit;
    }

    public void setBeforeEdit(BurnDownElement beforeEdit) {
        this.beforeEdit = beforeEdit;
    }

    public BurnDownElement getAfterEdit() {
        return afterEdit;
    }

    public void setAfterEdit(BurnDownElement afterEdit) {
        this.afterEdit = afterEdit;
    }

    public boolean isPopupDialogChangeOrder() {
        return popupDialogChangeOrder;
    }

    public void setPopupDialogChangeOrder(boolean popupDialogChangeOrder) {
        this.popupDialogChangeOrder = popupDialogChangeOrder;
    }

    public boolean isPopupDialogEdit() {
        return popupDialogEdit;
    }

    public void setPopupDialogEdit(boolean popupDialogEdit) {
        this.popupDialogEdit = popupDialogEdit;
    }    

    public int getOldValue() {
        return oldValue;
    }

    public void setOldValue(int oldValue) {
        this.oldValue = oldValue;
    }

    public int getAlteredValue() {
        return alteredValue;
    }

    public void setAlteredValue(int alteredValue) {
        this.alteredValue = alteredValue;
    }
    
/*----------------------------Other functions---------------------------------*/
    
    //setzt den modus mit dem im chart gearbeitet wird
    public void setMode(String componentID){
        popupPanelADD=false;
        popupDialogEdit=false;
        popupDialogChangeOrder=false;        
        
        switch(componentID){
            case "add":
                modes=BdCModes.add;
                popupPanelADD=true;
                break;
                
            case "edit":
                modes=BdCModes.edit;
                break;
            
            case "delete":
                modes=BdCModes.delete;                
                break;
            
            case "changeOrder":
                modes=BdCModes.changeOrder;
                popupDialogChangeOrder=true;
                break;
        }       
    }
    
    /**
     * Diese Funktion dient zum löschen, bearbeiten und einfügen von Punkten in
     * den Chart
     **/
    public void chartListener(ItemSelectEvent event){
        System.out.println("-------------------------------------------------");
        
        itemindex = event.getItemIndex();
        System.out.println("Index of Points in the Series, beginning with 0: "+itemindex);
        
        seriesindex = event.getSeriesIndex();
        System.out.println("ChartSeries, Index for Line: "+seriesindex);                
        
        System.out.println("-------------------------------------------------");                        
        
//BOTHSERIES OPTION LÖSCHEN!
//        if(bothSeries==false){
//            addValues();
//        }
        
        switch(modes){            
            case edit:
                editMilestoneListener(seriesindex, itemindex);
                break;
                
            case delete:
                deleteMilestone(seriesindex, itemindex);
                break;                            
        }
    }
    
    private void deleteMilestone(int seriesindex, int itemindex){
        Set<Object> keys = null;                //Milestones
        Iterator keyIterator = null;            
        ArrayList<Number> values = null;        //Values to the milestones
        Map<Object, Number> seriesData = null;  //Containing Keys and Values
        Map<Object,Number> m = new LinkedHashMap<>();        
        
        burnDownChartModel.clear();             /*Clear the chart from the old
         * values to render only the new (rerender does not work!)*/
        if(seriesindex == 0){ //desiredStateSeries
            seriesData = desiredStateSeries.getData();
            keys = seriesData.keySet();
            keyIterator = keys.iterator();
            
            values = new ArrayList<>(seriesData.values()); 
            values.set(itemindex, 0);
            
            int i = 0;
            while(keyIterator.hasNext()){                            
                Object key = keyIterator.next();
                m.put(key, values.get(i));
                i++;
            }
            
            desiredStateSeries.setData(m);
        }
        
        if(seriesindex == 1){ //actualStateSeries
            seriesData = actualStateSeries.getData();
            keys = seriesData.keySet();
            keyIterator = keys.iterator();
            
            values = new ArrayList<>(seriesData.values()); 
            values.set(itemindex, 0);
            
            int i = 0;
            while(keyIterator.hasNext()){                            
                Object key = keyIterator.next();
                m.put(key, values.get(i));                
                i++;
            }
            
            actualStateSeries.setData(m);
        }                        
        burnDownChartModel.addSeries(desiredStateSeries);
        burnDownChartModel.addSeries(actualStateSeries);
    }
    
    public void addValues(){
        Set<Object> keys = null;                //Milestones
        Map<Object, Number> seriesData = null;  //Containing Keys and Values
        Iterator keyIterator = null;

        seriesData = actualStateSeries.getData();
        keys = seriesData.keySet();
        keyIterator = keys.iterator();
        

        boolean keyAlreadyThere = false;
        
        //if the key already consists it would override the old one!
        while(keyIterator.hasNext()){
            String key = (String) keyIterator.next();
            if(key.equals(newKey)){
                keyAlreadyThere = true;
            }
        }        
        
        if(keyAlreadyThere == false){            
            //checkbox angecklickt, serienwerte in dialog eingegeben
//            if(bothSeries==true){
//                System.out.println("in beide serien eintragen!");
                if(actualValue!=null&&desiredValue!=null&&newKey!=null){
                    //abprüfen ob key noch nicht besteht

                    try{
                    actualStateSeries.set(newKey, Integer.parseInt(actualValue));
                    desiredStateSeries.set(newKey, Integer.parseInt(desiredValue));

                    }catch(NumberFormatException ex){
                        ex.printStackTrace();
                        error=new FacesMessage("A value you entered was not a number");
                        FacesContext.getCurrentInstance().addMessage("Error Message:", error);
                    }
                }
//            }
            
//            checkbox nicht angeclickt und serie zum einfügen manuell gewählt
//            if(bothSeries==false){
//                System.out.println("In nur eine Serie eintragen!");
//                if(newValue!=null&&newKey!=null){
//                    
//                    switch(seriesindex){
//                        case 0:
//                            try{
//                                System.out.println("In desired eintragen!");
//                                actualStateSeries.set(newKey, 0);
//                                desiredStateSeries.set(newKey, Integer.parseInt(newValue));
//                            }catch(NumberFormatException ex){
//                                ex.printStackTrace();
//                                error=new FacesMessage("A value you entered was not a number");
//                                FacesContext.getCurrentInstance().addMessage("Error Message:", error);
//                            }
//                            
//                            //FEHLER! Methode die in eine Serie einträgt nutzt immer actualseries
//                        case 1:
//                            try{
//                                System.out.println("In actual eintragen!");
//                                actualStateSeries.set(newKey, Integer.parseInt(newValue));
//                                desiredStateSeries.set(newKey, 0);
//                            }catch(NumberFormatException ex){
//                                ex.printStackTrace();
//                                error=new FacesMessage("A value you entered was not a number");
//                                FacesContext.getCurrentInstance().addMessage("Error Message:", error);
//                            }
//                    }
//                }
//            }
        }
    }
    
    public void editMilestoneListener(int seriesindex, int itemindex){
        Map<Object, Number> seriesData = null;  //Containing Keys and Values
        Number oldValue = null;                
        
        switch(seriesindex){
            case 0:
                seriesData = desiredStateSeries.getData();
                break;
                
            case 1:
                seriesData = actualStateSeries.getData();
                break;
        }
        
        try{
            ArrayList<Number> values = new ArrayList<>(seriesData.values());
            oldValue = values.get(itemindex);
            
            Set<Object> keys = seriesData.keySet();
            Iterator keyIterator = keys.iterator();
            String key = null;
            
            int i = 0;  //Ein durchlauf zu viel!
                        //MUSS DIALOG IN BEAN SICHTBAR MACHEN!
            while(i <= itemindex){
                key = keyIterator.next().toString();
                i++;
            }
            
            beforeEdit = new BurnDownElement(oldValue.intValue(), itemindex, seriesindex, key);
            this.oldValue = oldValue.intValue();

            afterEdit = new BurnDownElement();
            afterEdit.setItemindex(itemindex);
            afterEdit.setKey(key);
            afterEdit.setSeriesindex(seriesindex);
            
            //Dialog sichtbar machen
            RequestContext context = RequestContext.getCurrentInstance();
            context.execute("PF('popupEdit').show();");       
            context.update("popupDialogEdit");

            
        }catch(NullPointerException ex){            
            ex.printStackTrace();
        }
    }
    
    public void editMilestone(){        
        afterEdit.setValue(alteredValue);

        switch(afterEdit.getSeriesindex()){
            case 0:
                desiredStateSeries.set(afterEdit.getKey(), afterEdit.getValue());
                break;

            case 1:
                actualStateSeries.set(afterEdit.getKey(), afterEdit.getValue());
                break;
        }

    }
    
    public void changeOrder(){
        //we need the index of the two series you want to swap
    }
}
