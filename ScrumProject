package pojos;

import java.util.ArrayList;
import javax.faces.FacesException;
import javax.faces.context.FacesContext;
import org.primefaces.model.DefaultTreeNode;
import org.primefaces.model.TreeNode;

/**
 *
 * @author Philip Poelz
 */
public class ScrumProject {
    //Users are allowed to add files to the 3 main categories
    private TreeNode productB;
    private TreeNode sprintBs;
    private TreeNode burndownC;
    
    //Files that will be added
    public static ArrayList<TreeNode> files;
    
    //Funktionen für Create, Load, Save, Delete Project
    
    /* Konstruktor erstellt Ordner und fügt Projektpfad hinzu
     * Dateien werden später hinzugefügt*/
    public ScrumProject(TreeNode root){
        files = new ArrayList<>();
        productB = new DefaultTreeNode(new Document("Product Backlog","PBFolder"), root);
        sprintBs = new DefaultTreeNode(new Document("Sprint Backlogs","SBFolder"), root);
        burndownC = new DefaultTreeNode(new Document("Burndown Charts","BDCFolder"), root);
    }
    
    /*Create -> Dateibrowser, Pfad auswählen in dem Projektordner mit 3 Ordnern angelegt wird*/
    
    /*Load -> Dateibrowser, einzelne Dateien wie z.B.: Product Backlog sind nur
     innerhalb des Product Backlog Fensters/Tabs zu laden*/
    
    /*Save -> Dateibrowser, ein Projektordner wird erstellt*/
    
    /*Delete gibt Übersicht welche Dateien gelöscht werden sollen -> Checkboxes*/
    
    //Product Backlog Befehle für Dialog
    public String addProductBacklog(){
        boolean create = true;
        
        for(TreeNode tn:files){
            Document temp = (Document) tn.getData();
            if(temp.getFileNum()==100){
                create = false;
                throw new FacesException("There is already a Product Backlog!");
            }
        }
        
        if(create == true){
            TreeNode pb = new DefaultTreeNode("Document", new Document("PB", "Product Backlog"), productB);
            files.add(pb);
        }
        
        return null;
    }
    
    public String deleteProductBacklog(TreeNode root){
        for(TreeNode tn:files){
            Document temp = (Document) tn.getData();
            if(temp.getFileNum()==100){   
                productB.getChildren().remove(tn);
                files.remove(tn);
            }else{
                throw new FacesException("Could not find any Product Backlog!");
            }
        }
        FacesContext.getCurrentInstance().renderResponse();
   
        return null;
    }
    
    //Sprint Backlog Befehle für Dialog
    public String addSprintBacklog(){        
        TreeNode sb = new DefaultTreeNode("Document", new Document("SB", "Sprint Backlog"), sprintBs);
        files.add(sb);
        
        return null;
    }
    
    public void deleteSprintBacklog(TreeNode root, TreeNode selectedDocument){
        Document temp = (Document) selectedDocument.getData();
        if(temp!=null && temp.getFileNum()<50){
            files.remove(selectedDocument);
            sprintBs.getChildren().remove(selectedDocument);
        }
        FacesContext.getCurrentInstance().renderResponse();
        
    }
    
    //Burndown Chart Befehle für Dialog
    public String addBurndownChart(){        
        TreeNode bdC = new DefaultTreeNode("Document", new Document("BDC", "Burndown Chart"), burndownC);
        files.add(bdC);
        
        return null;
    }
    
    //root is needed to update the tree after delete
    public void deleteBurndownChart(TreeNode root, TreeNode selectedDocument){
        Document temp = (Document) selectedDocument.getData();
        if(temp!=null && temp.getFileNum()>49 && temp.getFileNum() <100){
            files.remove(selectedDocument);
            burndownC.getChildren().remove(selectedDocument);            
        }
        FacesContext.getCurrentInstance().renderResponse();
                
    }
    
    /*
     * Used if LoadProject-Button is clicked or after a Delete
     * 
     * It's essential to have the tree root, if element is deleted root has to
     * be updated
     */
    public void loadFiles(TreeNode root, boolean afterDelete){
        if(afterDelete==true){
            
            root=new DefaultTreeNode("Scrum Project", null);
            
            //One TreeNode was deleted so the root has to be updated
            for(TreeNode t:files){
                t.setParent(root);
            }
        }
        else{
            //used for database loading
        }
    }
}
